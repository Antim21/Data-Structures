Given a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies:

answer[i] % answer[j] == 0, or
answer[j] % answer[i] == 0
If there are multiple solutions, return any of them.


Example 1:

Input: nums = [1,2,3]
Output: [1,2]

Explanation: [1,3] is also accepted.

Example 2:

Input: nums = [1,2,4,8]
Output: [1,2,4,8]
 

Constraints:

1 <= nums.length <= 1000
1 <= nums[i] <= 2 * 109
All the integers in nums are unique.


 Solution

class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        int n = nums.size();
        sort(nums.begin(), nums.end()) ;

        vector<int>parent(n+1, -1) ;
        vector<vector<int>>dp(n+1, vector<int>(n+1,0)) ;

        int mxLen = 0, mxIdx = 1 ;
    
        for(int i=1 ; i<=n ; i++)
        {
            for(int j=i ; j<=n ; j++)
            {
                int not_pick = dp[i-1][j] ;
                int pick = 0 ;

                if(i < j && nums[j-1]%nums[i-1] == 0)
                {
                    pick = 1 + dp[i-1][i] ;

                    if(pick > not_pick) 
                    {
                        parent[j] = i ;

                        if(mxLen < pick)
                        {
                            mxLen = pick ;
                            mxIdx = j ;
                        }
                    }
                }

                dp[i][j] = max(pick, not_pick) ;
            }
        }

        vector<int>ans(mxLen+1) ;

        ans[mxLen--] = nums[mxIdx-1] ;
        mxIdx = parent[mxIdx] ;
        
        while(mxIdx != -1)
        {
            ans[mxLen--] = nums[mxIdx-1] ;
            mxIdx = parent[mxIdx] ;
        }

        return ans ;
    }
};
