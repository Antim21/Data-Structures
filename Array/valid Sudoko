

Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:

Each row must contain the digits 1-9 without repetition.
Each column must contain the digits 1-9 without repetition.
Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
Note:

A Sudoku board (partially filled) could be valid but is not necessarily solvable.
Only the filled cells need to be validated according to the mentioned rules.
 

Example 1:


Input: board = 
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: true
Example 2:

Input: board = 
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: false
Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.
 

Constraints:

board.length == 9
board[i].length == 9
board[i][j] is a digit 1-9 or '.'.



- **Solution**

#include <vector>
#include <unordered_set>

using namespace std;

class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        // Unordered sets for tracking numbers in rows, columns, and 3x3 sub-boxes
        vector<unordered_set<char>> rows(9), columns(9), sub_boxes(9);
        
        // Traverse the entire board
        for (int row = 0; row < 9; row++) {
            for (int col = 0; col < 9; col++) {
                char num = board[row][col];
                
                if (num == '.') continue; // Skip empty cells
                
                int boxIndex = (row / 3) * 3 + (col / 3); // Compute sub-box index
                
                // Check for duplicates in row, column, or sub-box
                if (rows[row].count(num) || columns[col].count(num) || sub_boxes[boxIndex].count(num)) {
                    return false;
                }

                // Insert number into respective sets
                rows[row].insert(num);
                columns[col].insert(num);
                sub_boxes[boxIndex].insert(num);
            }
        }
        return true; // If no duplicates found, board is valid
    }
};


- Approach
1. Validate Rows:

- Iterate through each row.
- Use an unordered set to check for duplicate numbers in the row.
- If a number is already in the set, return false.

2.Validate Columns:

- Iterate through each column.
- Use an unordered set to check for duplicate numbers in the column.
- If a number is already in the set, return false.

3.Validate 3×3 Sub-Boxes:

- Maintain a vector of 9 unordered sets, where each set corresponds to a sub-box.
- Compute the sub-box index using:
[
\text{boxIndex} = (\text{row} / 3) \times 3 + (\text{column} / 3)
]
- If a number is already in the respective sub-box’s set, return false.

4. Return true if all checks pass.

